I define intermediate Python code as:

Modular - Easily used by others and/or in other projects by you or others.
    Basically, write code with the intention to honor DRY (don't repeat yourself).
Maintainable - ...Both by the original author and by other users. Is it easily
    read-able and understood?
Scales - For this to happen, code needs to be efficient when it runs, and
    be able to scale. Think about reading files, working with requests,
    or doing calculations. Maintainability also plays a major role in scaling.

In general, code that meets the above standards in Python is done with the
Object Oriented Programming (OOP) paradigm. There does exist another paradigm,
called Functional Programming (FP), and there are bloody wars fought over which
is better. We're going to use OOP. Either one of these is better than outright
scripting, which what most beginner programmers are really doing.

>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
